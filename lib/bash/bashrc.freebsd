# FreeBSD-specific
# vim: ft=sh
alias ls='ls -wF'
alias pup='sudo portsnap fetch update; pkg version -vL='
alias bp='sudo portmaster -D'
alias pfls='sudo vp | vp_summary.pl'

md_create_encrypted() {
	local size=$1
	local mountpoint=$2
	if [ -z "$size" -o -z "$mountpoint" ]; then
		echo "usage: md_create_encrypted <size> <mountpoint>" >&2
		echo "       This will create and mount an encrypted MD of <size> on <mountpoint>."
		return 1
	fi
	local mdname=$(sudo mdconfig -s $size)
	if [ -n "$mdname" ]; then
		sudo geli onetime -s 4096 /dev/$mdname && \
			sudo newfs /dev/$mdname.eli && \
			sudo geli detach -l /dev/$mdname && \
			sudo mount /dev/$mdname.eli $mountpoint
	fi
}

if kldstat -m zfs > /dev/null 2>&1; then
	be_dataset() {
		zfs list -t filesystem -o name,mounted,canmount -r zroot/ROOT | awk '$2=="yes" && $3=="noauto" { print $1 }'
	}

	be_list_snapshot() {
		zfs list -t snapshot -H -o name,clones -r $(be_dataset) | egrep -v "ZB|auto" | sed -r 's/	zroot\/ROOT\/(.*)/ (\1)/'
	}

	_be_get_snapshot() {
		if [ -n "$1" ]; then
			zfs list -t snapshot -H -o name -r $(be_dataset) | egrep "@$1\$"
		fi
	}
	be_take_snapshot() {
		if [ -n "$1" ]; then
			if [ -n "$(_be_get_snapshot $1)" ]; then
				echo "The specified snapshot '$1' already exists for $(be_dataset)." >&2
			else
				sudo zfs snapshot -r $(be_dataset)@$1
			fi
		else
			echo "usage: be_take_snapshot <name>" >&2
			echo "       This will create a snapshot <name> of the current BE dataset." >&2
			echo "       The current BE dataset is '$(be_dataset)'." >&2
		fi
	}

	zfs_list_snapshot() {
		if [ -n "$1" ]; then
			zfs list -t snapshot -H -o name -r $1
		else
			zfs list -t snapshot -H -o name
		fi
	}

	zfs_list_filesystem() {
		local OPTIND
		local col1="name"
		local col2="recordsize,compression,com.sun:auto-snapshot"
		local types="filesystem"
		local morecolumns=""
		local fullcolumns=""
		while getopts "dslmcpt:o:O:h" opt
		do
			case "$opt" in
				d)
					# d - default (zfs list's)
					morecolumns="$morecolumns${morecolumns:+,}used,available,referenced,mountpoint"
					col2=""
					;;
				s)
					# s - size
					morecolumns="$morecolumns${morecolumns:+,}used,available,referenced,usedbysnapshots"
					col2=""
					;;
				l)
					# l - long
					morecolumns="$morecolumns${morecolumns:+,}used,referenced"
					;;
				m)
					# m - mounts
					morecolumns="$morecolumns${morecolumns:+,}mountpoint,canmount,mounted"
					col2=""
					;;
				c)
					# c - clones
					morecolumns="$morecolumns${morecolumns:+,}origin"
					col2=""
					;;
				p)
					# p - properties
					morecolumns="$morecolumns${morecolumns:+,}atime,canmount"
					;;
				t)
					# t - types to show
					if [ -n "$OPTARG" ]; then
						types="$OPTARG"
					fi
					;;
				o)
					# o - optional (additional) columns
					if [ -n "$OPTARG" ]; then
						morecolumns="$morecolumns${morecolumns:+,}$OPTARG"
					fi
					;;
				O)
					# O - alternate columns
					if [ -n "$OPTARG" ]; then
						fullcolumns="$OPTARG"
					fi
					;;
				h|*)
					# h - help
					echo "usage: zfs_list_filesystem [-dlmcp] [-t types] [-{o|O} cols] [dataset]"
					echo "       zfs_list_filesystem -h"
					echo
					echo "       -d: default of 'zfs list'"
					echo "       -s: size (show name,used,referenced,usedbysnapshots)"
					echo "       -l: long (show default + used,referenced)"
					echo "       -m: mount (show name,mountpoint,canmount,mounted)"
					echo "       -c: clone (show name,origin)"
					echo "       -p: properties (show default + name,atime,canmount)"
					echo "       -t: types (types for 'zfs list -t'"
					echo "       -o cols: additional columns to the default."
					echo "       -O cols: alternate columns to the default."
					echo
					echo "       Default columns: name,recordsize,compresion,autosnap"
					echo
					return 0
					;;
			esac
		done
		shift $(( $OPTIND - 1 ))

		if [ -z "$fullcolumns" ]; then
			if [ -n "$morecolumns" ]; then
				fullcolumns="${col1},${morecolumns},${col2}"
			else
				fullcolumns="${col1},${col2}"
			fi
		fi

		if [ -n "$1" ]; then
			zfs list -t $types -o $fullcolumns -r $1 | sed 's/COM\.SUN:AUTO-SNAPSHOT/AUTOSNAP/'
		else
			zfs list -t $types -o $fullcolumns | sed 's/COM\.SUN:AUTO-SNAPSHOT/AUTOSNAP/'
		fi
	}
fi
